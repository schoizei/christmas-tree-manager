@page "/distribution-tours/{distributionTourId}/streets"@attribute [Authorize]@inject IJSRuntime JSRuntime@inject NavigationManager NavigationManager@inject DialogService DialogService@inject ContextMenuService ContextMenuService@inject TooltipService TooltipService@inject NotificationService NotificationService@inject ApplicationDbService ApplicationDbService<RadzenStack>    <RadzenRow AlignItems="AlignItems.Center">        <RadzenColumn Size="12" SizeMD="6">            <RadzenText Text="@title" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />        </RadzenColumn>        <RadzenColumn Size="12" SizeMD="6">            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">                <RadzenSplitButton Icon="get_app" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">                    <RadzenSplitButtonItem Text="Excel" Value="xlsx" />                    <RadzenSplitButtonItem Text="CSV" Value="csv" />                    <RadzenSplitButtonItem Text="PDF" Value="pdf" />                </RadzenSplitButton>            </RadzenStack>        </RadzenColumn>    </RadzenRow>    <RadzenRow>        <RadzenColumn SizeMD=12>            <RadzenDataGrid @ref="dataGrid" ColumnWidth="200px" AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{10, 50, 100, 500}) PageSize=10 Data="@data" TItem="Street" RowDoubleClick="@EditRow">                <Columns>                    <RadzenDataGridColumn TItem="Street" Property="ZipCode" Title="Postleitzahl">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="City" Title="Ort">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="District" Title="Ortsteil">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="Name" Title="Name">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="Street" Property="DistributionTourFormCount" Title="Zetteltour Anzahl">                    </RadzenDataGridColumn>                </Columns>            </RadzenDataGrid>        </RadzenColumn>    </RadzenRow></RadzenStack>@code {
    [Inject]    protected SecurityService Security { get; set; } = null!;    [Parameter]
    public required string DistributionTourId { get; set; }
    protected DistributionTour distributionTour = null!;

    protected string title = null!;
    protected IEnumerable<Street> data = null!;
    protected RadzenDataGrid<Street> dataGrid = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        data = await ApplicationDbService.GetStreets(new Query        {
            Filter = $"(DistributionTourId == null ? \"\" : DistributionTourId) == \"{DistributionTourId}\"",
            Expand = "CollectionTour,DistributionTour"
        });
        distributionTour = await ApplicationDbService.GetDistributionTourById(DistributionTourId) ?? throw new InvalidOperationException("Failed to query Entity!");
        title = $"Zetteltour: {distributionTour.Name}";
    }

    protected async Task EditRow(DataGridRowMouseEventArgs<Street> args)
    {
        await DialogService.OpenAsync<EditStreet>("Stra&szlig;e bearbeiten", new Dictionary<string, object> { { "Id", args.Data.Id! } });
        await dataGrid.Reload();
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        var filename = $"Distributions_{distributionTour.Name}";
        var idStrings = string.Join(",", data.Select(x => "\"" + x.Id + "\""));
        var query = new Query
        {
            Filter = $"(DistributionTourId == null ? \"\" : DistributionTourId) == \"{DistributionTourId}\"",
            OrderBy = $"{dataGrid.Query.OrderBy}",
            Expand = "CollectionTour,DistributionTour",            Select = string.Join(",", dataGrid.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property.Contains(".") ? c.Property + " as " + c.Property.Replace(".", "") : c.Property))        };

        if (args?.Value == "csv")
        {
            var uri = query.ToUrl($"export/streets/csv(fileName='{UrlEncoder.Default.Encode(filename)}')");
            NavigationManager.NavigateTo(uri, true);
        }

        if (args?.Value == "xls")
        {
            var uri = query.ToUrl($"export/streets/excel(fileName='{UrlEncoder.Default.Encode(filename)}')");
            NavigationManager.NavigateTo(uri, true);
        }
        if (args == null || args.Value == "pdf")
        {
            var uri = query.ToUrl($"export/distributiontours/{DistributionTourId}/streets/pdf(fileName='{UrlEncoder.Default.Encode(filename)}')");
            NavigationManager.NavigateTo(uri, true);
        }
    }}