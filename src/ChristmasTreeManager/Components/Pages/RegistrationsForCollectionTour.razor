@page "/collection-tours/{collectionTourId}/registrations"@attribute [Authorize]@inject IJSRuntime JSRuntime@inject NavigationManager NavigationManager@inject DialogService DialogService@inject ContextMenuService ContextMenuService@inject TooltipService TooltipService@inject NotificationService NotificationService@inject ApplicationDbService ApplicationDbService<RadzenStack>    <RadzenRow AlignItems="AlignItems.Center">        <RadzenColumn Size="12" SizeMD="6">            <RadzenText Text="@title" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />        </RadzenColumn>        <RadzenColumn Size="12" SizeMD="6">            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">                <RadzenSplitButton Icon="get_app" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">                    <RadzenSplitButtonItem Text="Excel" Value="xlsx" />                    <RadzenSplitButtonItem Text="CSV" Value="csv" />                    <RadzenSplitButtonItem Text="PDF" Value="pdf" />                </RadzenSplitButton>            </RadzenStack>        </RadzenColumn>    </RadzenRow>    <RadzenRow>        <RadzenColumn SizeMD=12>            <RadzenDataGrid @ref="dataGrid" ColumnWidth="200px" AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{10, 50, 100, 500}) PageSize=500 Data="@data" TItem="RegistrationExport" RowDoubleClick="@EditRow">                <Columns>                    <RadzenDataGridColumn TItem="RegistrationExport" Property="Address" Title="Adresse" Width="350px" OrderIndex="0">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="RegistrationExport" Property="Customer" Title="Name" Width="225px">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="RegistrationExport" Property="TreeCount" Title="Anzahl" Width="100px">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="RegistrationExport" Property="Comment" Title="Kommentar" Width="300px">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="RegistrationExport" Property="Phone" Title="Telefon" Width="150px">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="RegistrationExport" Property="Mail" Title="E-Mail" Width="150px">                    </RadzenDataGridColumn>                </Columns>            </RadzenDataGrid>        </RadzenColumn>    </RadzenRow></RadzenStack>@code {
    [Inject]    protected SecurityService Security { get; set; } = null!;    [Parameter]    public required string collectionTourId { get; set; }
    protected CollectionTour collectionTour = null!;

    protected string title = null!;
    protected IEnumerable<RegistrationExport> data = null!;
    protected RadzenDataGrid<RegistrationExport> dataGrid = null!;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        data = await ApplicationDbService.GetRegistrationsForCollectionTour(collectionTourId);

        collectionTour = await ApplicationDbService.GetCollectionTourById(collectionTourId) ?? throw new InvalidOperationException("Failed to query Entity!");
        title = $"Sammeltour: {collectionTour.Name}";
    }

    protected async Task EditRow(DataGridRowMouseEventArgs<RegistrationExport> args)
    {
        await DialogService.OpenAsync<EditRegistration>("Anmeldung bearbeiten", new Dictionary<string, object> { { "Id", args.Data.Id! } });
        await dataGrid.Reload();
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {        var filename = $"Registrations_{collectionTour.Name}";

        if (args?.Value == "csv")
        {
            var uri = $"export/collectiontours/{collectionTourId}/registrations/csv(fileName='{UrlEncoder.Default.Encode(filename)}')";
            NavigationManager.NavigateTo(uri, true);
        }
        if (args?.Value == "xlsx")
        {
            var uri = $"export/collectiontours/{collectionTourId}/registrations/excel(fileName='{UrlEncoder.Default.Encode(filename)}')";
            NavigationManager.NavigateTo(uri, true);
        }
        if (args == null || args.Value == "pdf")
        {
            var uri = $"export/collectiontours/{collectionTourId}/registrations/pdf(fileName='{UrlEncoder.Default.Encode(filename)}')";
            NavigationManager.NavigateTo(uri, true);
        }
    }}