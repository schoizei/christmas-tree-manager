@using Toolbelt.Blazor.HotKeys2@implements IAsyncDisposable@page "/registration/add"@attribute [Authorize]@inject IJSRuntime JSRuntime@inject NavigationManager NavigationManager@inject DialogService DialogService@inject ContextMenuService ContextMenuService@inject TooltipService TooltipService@inject NotificationService NotificationService@inject ApplicationDbService ApplicationDbService@inject HotKeys HotKeys<RadzenColumn SizeMD=12>    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Anmeldung konnte nicht erstellt werden</RadzenAlert>    <RadzenTemplateForm TItem="Registration" Data="@registration" Visible="@(registration != null && canEdit)" Submit="@FormSubmit">        <RadzenRow style="margin-bottom: 1rem">            <RadzenColumn SizeMD="3">                <RadzenLabel Text="Anmeldedatum" Component="RegistrationDate" style="width: 100%" />            </RadzenColumn>            <RadzenColumn SizeMD="9">                <RadzenDatePicker Style="display: block; width: 100%" @bind-Value="@registration!.RegistrationDate" Name="RegistrationDate" DateFormat="dd.MM.yyyy" />                <RadzenRequiredValidator Component="RegistrationDate" Text="RegistrationDate is required" />            </RadzenColumn>        </RadzenRow>        <RadzenRow style="margin-bottom: 1rem">            <RadzenColumn SizeMD="3">                <RadzenLabel Text="Anmeldestelle" Component="RegistrationPoint" style="width: 100%" />            </RadzenColumn>            <RadzenColumn SizeMD="9">                <RadzenDropDown Name="RegistrationPointId" Data="@registrationPointsForRegistrationPointId" @bind-Value="@registration!.RegistrationPointId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true" TextProperty="Name" ValueProperty="Id" AllowVirtualization="true" AllowClear="true" Placeholder="Annahmestelle ausw&auml;hlen..." Style="display: block; width: 100%" OpenOnFocus="true" />                <RadzenRequiredValidator Component="RegistrationPointId" Text="RegistrationPoint is required" />            </RadzenColumn>        </RadzenRow>        <RadzenRow style="margin-bottom: 1rem">            <RadzenColumn SizeMD="3">                <RadzenLabel Text="Name" Component="Customer" style="width: 100%" />            </RadzenColumn>            <RadzenColumn SizeMD="9">                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@registration!.Customer" Name="Customer" id="txtCustomer" />                <RadzenRequiredValidator Component="Customer" Text="Name is required" />            </RadzenColumn>        </RadzenRow>        <RadzenRow style="margin-bottom: 1rem">            <RadzenColumn SizeMD="3">                <RadzenLabel Text="Stra&szlig;e" Component="Street" style="width: 100%" />            </RadzenColumn>            <RadzenColumn SizeMD="9">                <RadzenDropDown Name="StreetId" Data="@streetsForStreetId" @bind-Value="@registration!.StreetId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true" TextProperty="DisplayName" ValueProperty="Id" AllowVirtualization="true" AllowClear="true" Placeholder="Stra&szlig;e ausw&auml;hlen..." Style="display: block; width: 100%" OpenOnFocus="true" />                <RadzenRequiredValidator Component="StreetId" Text="Street is required" />            </RadzenColumn>        </RadzenRow>        <RadzenRow style="margin-bottom: 1rem">            <RadzenColumn SizeMD="3">                <RadzenLabel Text="Hausnummer" Component="Housenumber" style="width: 100%" />            </RadzenColumn>            <RadzenColumn SizeMD="7">                <RadzenNumeric style="display: block; width: 100%" @bind-Value="@registration!.Housenumber" Name="Housenumber" />                <RadzenRequiredValidator Component="Housenumber" Text="Housenumber is required" />            </RadzenColumn>            <RadzenColumn SizeMD="2">                <RadzenTextBox style="width: 100%" @bind-Value="@registration!.HousenumberPostfix" Name="HousenumberPostfix" />            </RadzenColumn>        </RadzenRow>        <RadzenRow style="margin-bottom: 1rem">            <RadzenColumn SizeMD="3">                <RadzenLabel Text="Anzahl B&auml;ume" Component="TreeCount" style="width: 100%" />            </RadzenColumn>            <RadzenColumn SizeMD="9">                <RadzenNumeric style="display: block; width: 100%" @bind-Value="@registration!.TreeCount" Name="TreeCount" />                <RadzenRequiredValidator Component="TreeCount" Text="TreeCount is required" />            </RadzenColumn>        </RadzenRow>        <RadzenRow style="margin-bottom: 1rem">            <RadzenColumn SizeMD="3">                <RadzenLabel Text="Betrag" Component="Donation" style="width: 100%" />            </RadzenColumn>            <RadzenColumn SizeMD="9">                <RadzenNumeric style="display: block; width: 100%" @bind-Value="@registration!.Donation" Format="c" Name="Donation" />                <RadzenRequiredValidator Component="Donation" Text="Donation is required" />            </RadzenColumn>        </RadzenRow>        <RadzenRow style="margin-bottom: 1rem">            <RadzenColumn SizeMD="3">                <RadzenLabel Text="Telefon" Component="Phone" style="width: 100%" />            </RadzenColumn>            <RadzenColumn SizeMD="9">                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@registration!.Phone" Name="Phone" />            </RadzenColumn>        </RadzenRow>        <RadzenRow style="margin-bottom: 1rem">            <RadzenColumn SizeMD="3">                <RadzenLabel Text="E-Mail" Component="Mail" style="width: 100%" />            </RadzenColumn>            <RadzenColumn SizeMD="9">                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@registration!.Mail" Name="Mail" />            </RadzenColumn>        </RadzenRow>        <RadzenRow style="margin-bottom: 1rem">            <RadzenColumn SizeMD="3">                <RadzenLabel Text="Kommentar" Component="Comment" style="width: 100%" />            </RadzenColumn>            <RadzenColumn SizeMD="9">                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@registration!.Comment" Name="Comment" />            </RadzenColumn>        </RadzenRow>        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">            <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Click="@CancelButtonClick" Text="Abbruch" />            <RadzenButton ButtonStyle="ButtonStyle.Secondary" ButtonType="ButtonType.Submit" Icon="save" Text="Speichern" Variant="Variant.Flat" Click="@SubmitClick" />            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Speichern&Neu" Variant="Variant.Flat" Click="@SubmitAndNewClick" />        </RadzenStack>    </RadzenTemplateForm></RadzenColumn>@code {

    [Inject]
    protected SecurityService Security { get; set; } = null!;

    [Parameter]
    public Registration? PreviousRegistration { get; set; }

    protected HotKeysContext _hotKeysContext = null!;    protected bool hasChanges = false;
    protected bool canEdit = true;
    protected bool errorVisible;
    protected Registration registration = null!;
    protected IEnumerable<RegistrationPoint> registrationPointsForRegistrationPointId = null!;
    protected IEnumerable<Street> streetsForStreetId = null!;

    public async ValueTask DisposeAsync()
    {
        if (_hotKeysContext is not null)    {
            await _hotKeysContext.DisposeAsync();
        }
    }    protected override async Task OnInitializedAsync()
    {
        _hotKeysContext = HotKeys
            .CreateContext()
            .Add(ModCode.Ctrl, Code.Enter, HotKeySubmitAndNew, new() { Exclude = Exclude.InputNonText | Exclude.TextArea });

        registration = new Registration();
        if (PreviousRegistration is not null)
        {
            registration.RegistrationDate = PreviousRegistration.RegistrationDate;
            registration.RegistrationPointId = PreviousRegistration.RegistrationPointId;
        }

        registrationPointsForRegistrationPointId = await ApplicationDbService.GetRegistrationPoints();
        streetsForStreetId = await ApplicationDbService.GetStreets();    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", $@"document.getElementById(""txtCustomer"").focus()");
        }
    }

    protected async Task SubmitClick(MouseEventArgs args)
    {
        registration.ContinueToNew = false;
    }

    protected async Task SubmitAndNewClick(MouseEventArgs args)
    {
        registration.ContinueToNew = true;
    }
    private async ValueTask HotKeySubmitAndNew()
    {
        registration.ContinueToNew = true;
        await FormSubmit();    }

    protected async Task FormSubmit()
    {
        try
        {
            await ApplicationDbService.CreateRegistration(Security.UserName, registration);
            NotificationService.Notify(NotificationSeverity.Success, "Anmeldung gespeichert!", duration: 1500);
            DialogService.Close(registration);
        }
        catch (Exception ex)
        {
            hasChanges = ex is Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException;
            canEdit = !(ex is Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException);
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }}