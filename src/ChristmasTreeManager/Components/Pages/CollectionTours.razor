@page "/collection-tours"@attribute [Authorize]@inject IJSRuntime JSRuntime@inject NavigationManager NavigationManager@inject DialogService DialogService@inject ContextMenuService ContextMenuService@inject TooltipService TooltipService@inject NotificationService NotificationService@inject ApplicationDbService ApplicationDbService<RadzenStack>    <RadzenRow AlignItems="AlignItems.Center">        <RadzenColumn Size="12" SizeMD="6">            <RadzenText Text="Sammeltouren" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />        </RadzenColumn>        <RadzenColumn Size="12" SizeMD="6">            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">                <RadzenSplitButton Icon="get_app" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">                    <RadzenSplitButtonItem Text="Excel" Value="xlsx" />                    <RadzenSplitButtonItem Text="CSV" Value="csv" />                </RadzenSplitButton>                <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />            </RadzenStack>        </RadzenColumn>    </RadzenRow>    <RadzenRow>        <RadzenColumn SizeMD=12>            <RadzenDataGrid @ref="dataGrid" ColumnWidth="200px" AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PPageSizeOptions=@(new int[]{10, 50, 100, 500}) PageSize=10 Data="@data" TItem="CollectionTour" RowDoubleClick="@EditRow">                <Columns>                    <RadzenDataGridColumn TItem="CollectionTour" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">                        <Template Context="collectionTour">                            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="assignment" Size="ButtonSize.Medium" Shade="Shade.Lighter" Variant="Variant.Flat" Click=@(args => GridRegistrationsButtonClick(args, collectionTour)) />                        </Template>                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="CollectionTour" Property="Name" Title="Name">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="CollectionTour" Property="Vehicle" Title="Fahrzeug">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="CollectionTour" Property="Driver" Title="Fahrer">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="CollectionTour" Property="TeamLeader" Title="Schriftf&uuml;hrer">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="CollectionTour" Property="Staff" Title="Mitarbeiter">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="CollectionTour" Property="CreatedAt" Title="Erstelldatum">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="CollectionTour" Property="CreatedBy" Title="Ersteller">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="CollectionTour" Property="UpdatedAt" Title="&Auml;nderungsdatum">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="CollectionTour" Property="UpdatedBy" Title="Bearbeiter">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="CollectionTour" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">                        <Template Context="collectionTour">                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium" Shade="Shade.Lighter" Variant="Variant.Flat" Click=@(args => GridDeleteButtonClick(args, collectionTour)) @onclick:stopPropagation="true" />                        </Template>                    </RadzenDataGridColumn>                </Columns>            </RadzenDataGrid>        </RadzenColumn>    </RadzenRow></RadzenStack>@code {
    [Inject]
    protected SecurityService Security { get; set; } = null!;

    protected IEnumerable<CollectionTour> data = null!;
    protected RadzenDataGrid<CollectionTour> dataGrid = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        data = await ApplicationDbService.GetCollectionTours(new Query { Expand = "Streets" });
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddCollectionTour>("Neue Sammlungstour", null);
        await dataGrid.Reload();
    }

    protected async Task EditRow(DataGridRowMouseEventArgs<CollectionTour> args)
    {
        await DialogService.OpenAsync<EditCollectionTour>("Sammlungstour bearbeiten", new Dictionary<string, object> { { "Id", args.Data.Id! } });
        await dataGrid.Reload();
    }

    protected async Task GridRegistrationsButtonClick(MouseEventArgs args, CollectionTour collectionTour)
    {
        NavigationManager.NavigateTo($"/collection-tours/{collectionTour.Id}/registrations");
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, CollectionTour collectionTour)
    {
        try
        {
            if (await DialogService.Confirm("Sind Sie sicher, dass Sie diese Sammlungstour l&ouml;schen wollen?", "Best&auml;tigung") == true)
            {
                var deleteResult = await ApplicationDbService.DeleteCollectionTour(collectionTour.Id!);
                if (deleteResult != null)
                {
                    await dataGrid.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage                {                    Severity = NotificationSeverity.Error,                    Summary = $"Error",                    Detail = $"Sammlungstour kann nicht gel&ouml;scht werden"                });
        }
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {        var query = new Query        {            Filter = $@"{(string.IsNullOrEmpty(dataGrid.Query.Filter) ? "true" : dataGrid.Query.Filter)}",            OrderBy = $"{dataGrid.Query.OrderBy}",            Expand = "",            Select = string.Join(",", dataGrid.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property.Contains(".") ? c.Property + " as " + c.Property.Replace(".", "") : c.Property))        };

        if (args?.Value == "csv")
        {

            var uri = query.ToUrl($"export/collectiontours/csv(fileName='{UrlEncoder.Default.Encode("CollectionTours")}')");
            NavigationManager.NavigateTo(uri, true);
        }
        if (args == null || args.Value == "xlsx")
        {
            var uri = query.ToUrl($"export/collectiontours/excel(fileName='{UrlEncoder.Default.Encode("CollectionTours")}')");
            NavigationManager.NavigateTo(uri, true);
        }
    }}